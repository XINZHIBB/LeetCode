Thoughts:
there are two cases in the final result.
1. no element is deleted
2. one element is deleted

case1 is the max subarray sum problem 
case2: 
the deteled element will split the result array into two subarrays. 
To find the max sum subarray including deleted element, we need to konw the maxEndAt [i-1] and maxStartingAt [i+1].

maxEndAt[i-1] can be derived from case1. 
maxStartingAt[i+1] can apply similar dp method. 

Time: O(n)
Space: O(n) 



class Solution {
    public int maximumSum(int[] arr) {
        if (arr == null || arr.length == 0) {
            return 0; 
        }
        
        int n = arr.length; 
        int max = arr[0];
        int[] maxEnd = new int[n];
        int[] maxStart = new int[n];
        
        // build maxEnd and get result for case1
        maxEnd[0] = max; 
        for (int i = 1; i < arr.length; i++) {
            maxEnd[i] = Math.max(arr[i], maxEnd[i - 1] + arr[i]);
            max = Math.max(max, maxEnd[i]);
        }
        
        // build maxStart 
        maxStart[n - 1] = arr[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            maxStart[i] = Math.max(arr[i], maxStart[i+1] + arr[i]);
        }
        
        // combine case1 and case2
        for (int i = 1; i < n - 1; i++) {
            max = Math.max(max, maxEnd[i - 1] + maxStart[i + 1]);
        }
        
        return max; 
    }
}
