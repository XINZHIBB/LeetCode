Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.

Idea: 
1. naive idea: choose two points to decide a line, and check all other point to see if the point exist in the line. 
               space complexity: o(1) time complexity: o(n^3)
2. improved: for one point, check the slope with other points, and use a hashmap to store <slope, number of points>. 
             maintain a global max-points. A line can be decided by a point and the slope.
             space： o(n) time: o(n^2)

Code: 

// Max Points on a Line
public class Solution {
    public int maxPoints(Point[] points) {
        if (points.length < 3) return points.length;
        int result = 0;

        Map<Double, Integer> slope_count = new HashMap<>();
        for (int i = 0; i < points.length-1; i++) {
            slope_count.clear();
            int samePointNum = 0; // same point 
            int point_max = 1;    // max number of points on the same line with i 
            
            for (int j = i + 1; j < points.length; j++) {
                final double slope; // 斜率
                if (points[i].x == points[j].x) {
                    slope = Double.POSITIVE_INFINITY;
                    if (points[i].y == points[j].y) {
                        ++ samePointNum;
                        continue;
                    }
                } else {
                    if (points[i].y == points[j].y) {
                        // 0.0 and -0.0 is the same
                        slope = 0.0;
                    } else {
                        slope = 1.0 * (points[i].y - points[j].y) /
                                (points[i].x - points[j].x);
                    }
                }

                int count = 0;
                if (slope_count.containsKey(slope)) {
                    final int tmp = slope_count.get(slope);
                    slope_count.put(slope, tmp + 1);
                    count = tmp + 1;
                } else {
                    count = 2;
                    slope_count.put(slope, 2);
                }

                if (point_max < count) point_max = count;  
            }
            result = Math.max(result, point_max + samePointNum);
        }
        return result;
    }
}
