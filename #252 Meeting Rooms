Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.

For example,
Given [[0, 30],[5, 10],[15, 20]],
return false.

Solution: 
-> There is no overlapping intervals in this array 

method1: for each interval, check if the rest intervals are overlapping with current
         O(n^2)
         
method2: sort by the start, 
         case1: current interval overlap with next interval, return false;
         case2: not overlap, current = next 

public boolean 
/** 
 * Definition for an interval. 
 * struct Interval { 
 *     int start; 
 *     int end; 
 *     Interval() : start(0), end(0) {} 
 *     Interval(int s, int e) : start(s), end(e) {} 
 * }; 
 */  
class Solution {  
public:  
    boolean canAttendMeetings(Interval[] intervals) {           
          if (intervals == null || intervals.length == 0) {
              return true;
          }
          
          Arrays.sort(intervals, new Comparator<Interval>(){
              @Override
              public int compare(Interval i1, Interval i2) {
                return i1.start - i2.start; 
              }
          });
          
          int curIndex = 0; 
          for (int i = 1; i < intervals.length; i++) {
              if (intervals[curIndex].end >= intervals[i].start) {
                  return false; 
              }
              curInex++; 
          }
          return true; 
    }       
};         
         
         
method3:
          ------
                  -------
                        -----
            1        1  2  1 
            sort the start, end. 
            maintain a variable means the number of meetings the current time 
            when visited a start node, num++; 
            when visited a end node, num--; 
            if num == 2, return false
            
